	'document.getElementById("demo").innerHTML += data'
	'var characters = getContent(".\Characters.txt")'



	/*
	var strCharacters = JSON.stringify(characters);

	alert(strCharacters)
	var objCharacters = JSON.parse(strCharacters);
	var str = objCharacters.Breeds[1].Breed;
	document.getElementById("demo").innerHTML += "Row";
	document.getElementById("demo2").innerHTML += "Value";
	for (var i = 0;i < strCharacters.length;i++){
   	document.getElementById("demo").innerHTML += i + "<br>";
   	document.getElementById("demo2").innerHTML += strCharacters[i] + "<br>";
	}
	*/
	/*
	document.getElementById("demo").innerHTML = JSON.stringify(json)
	for (var key in obj) {
  	document.getElementById("demo").innerHTML =  obj[key];
	}
	*/

}


htmlCharacters.onload = function() { 
   
   alert(htmlCharacters)

   for (var prop in data) {
      if (Object.prototype.hasOwnProperty.call(data, prop)) {
         document.getElementById("demo").innerHTML += prop + "<br>";
      }
   }

   for (var i = 0; i < arrDom.length;i++){
      document.getElementById("demo").innerHTML += data + "." + arrDom[i]
   }
}

var domAttributes = {
"activeElement":"Returns the currently focused element in the document",
"addEventListener()":"Attaches an event handler to the document",
"adoptNode()":"Adopts a node from another document",
"anchors":"Returns a collection of all <a> elements in the document that have a name attribute",
"applets":"Returns a collection of all <applet> elements in the document",
"baseURI":"Returns the absolute base URI of a document",
"body":"Sets or returns the document's body (the <body> element)",
"close()":"Closes the output stream previously opened with document.open()",
"cookie":"Returns all name/value pairs of cookies in the document",
"charset":"Deprecated. Use characterSet instead. Returns the character encoding for the document",
"characterSet":"Returns the character encoding for the document",
"createAttribute()":"Creates an attribute node",
"createComment()":"Creates a Comment node with the specified text",
"createDocumentFragment()":"Creates an empty DocumentFragment node",
"createElement()":"Creates an Element node",
"createEvent()":"Creates a new event",
"createTextNode()":"Creates a Text node",
"defaultView":"Returns the window object associated with a document, or null if none is available.",
"designMode":"Controls whether the entire document should be editable or not.",
"doctype":"Returns the Document Type Declaration associated with the document",
"documentElement":"Returns the Document Element of the document (the <html> element)",
"documentMode":"Returns the mode used by the browser to render the document",
"documentURI":"Sets or returns the location of the document",
"domain":"Returns the domain name of the server that loaded the document",
"domConfig":"Obsolete. Returns the DOM configuration of the document",
"embeds":"Returns a collection of all <embed> elements the document",
"execCommand()":"Invokes the specified clipboard operation on the element currently having focus.",
"forms":"Returns a collection of all <form> elements in the document",
"fullscreenElement":"Returns the current element that is displayed in fullscreen mode",
"fullscreenEnabled()":"Returns a Boolean value indicating whether the document can be viewed in fullscreen mode",
"getElementById()":"Returns the element that has the ID attribute with the specified value",
"getElementsByClassName()":"Returns a HTMLCollection containing all elements with the specified class name",
"getElementsByName()":"Returns a HTMLCollection containing all elements with a specified name",
"getElementsByTagName()":"Returns a HTMLCollection containing all elements with the specified tag name",
"hasFocus()":"Returns a Boolean value indicating whether the document has focus",
"head":"Returns the <head> element of the document",
"images":"Returns a collection of all <img> elements in the document",
"implementation":"Returns the DOMImplementation object that handles this document",
"importNode()":"Imports a node from another document",
"inputEncoding":"Returns the encoding, character set, used for the document",
"lastModified":"Returns the date and time the document was last modified",
"links":"Returns a collection of all <a> and <area> elements in the document that have a href attribute",
"normalize()":"Removes empty Text nodes, and joins adjacent nodes",
"normalizeDocument()":"Removes empty Text nodes, and joins adjacent nodes",
"open()":"Opens an HTML output stream to collect output from document.write()",
"querySelector()":"Returns the first element that matches a specified CSS selector(s) in the document",
"querySelectorAll()":"Returns a static NodeList containing all elements that matches a specified CSS selector(s) in the document",
"readyState":"Returns the (loading) status of the document",
"referrer":"Returns the URL of the document that loaded the current document",
"removeEventListener()":"Removes an event handler from the document (that has been attached with the addEventListener() method)",
"renameNode()":"Renames the specified node",
"scripts":"Returns a collection of <script> elements in the document",
"strictErrorChecking":"Sets or returns whether error-checking is enforced or not",
"title":"Sets or returns the title of the document",
"URL":"Returns the full URL of the HTML document",
"write()":"Writes HTML expressions or JavaScript code to a document",
"writeln()":"Same as write() but adds a newline character after each statement"
}

//GET ARRAY OF DOM OBJECT PROPERTIES AND METHODS from https://www.w3schools.com/jsref/dom_obj_document.asp. Currently, listed above in JSON.
var strDomAttributes = JSON.stringify(domAttributes);
var objDomAttributes = JSON.parse(strDomAttributes);
var arrDom = [];
for (var i = 0;i < Object.keys(objDomAttributes).length;i++){
   arrDom.push(Object.keys(objDomAttributes)[i] + "<br>");
}
//document.getElementById("demo").innerHTML = arrDom

//GET CHARACTERS.JSON FILE CONTENT. STORED LOCALLY AT ./characters.json, but pulled from html
//var htmlCharacters = document.getElementById("data");
//var htmlCharacters = document.getElementByID("data").contentDocument.documentElement;
