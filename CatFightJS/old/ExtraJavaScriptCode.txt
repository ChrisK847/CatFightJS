	'document.getElementById("demo").innerHTML += data'
	'var characters = getContent(".\Characters.txt")'



	/*
	var strCharacters = JSON.stringify(characters);

	alert(strCharacters)
	var objCharacters = JSON.parse(strCharacters);
	var str = objCharacters.Breeds[1].Breed;
	document.getElementById("demo").innerHTML += "Row";
	document.getElementById("demo2").innerHTML += "Value";
	for (var i = 0;i < strCharacters.length;i++){
   	document.getElementById("demo").innerHTML += i + "<br>";
   	document.getElementById("demo2").innerHTML += strCharacters[i] + "<br>";
	}
	*/
	/*
	document.getElementById("demo").innerHTML = JSON.stringify(json)
	for (var key in obj) {
  	document.getElementById("demo").innerHTML =  obj[key];
	}
	*/

}


htmlCharacters.onload = function() { 
   
   alert(htmlCharacters)

   for (var prop in data) {
      if (Object.prototype.hasOwnProperty.call(data, prop)) {
         document.getElementById("demo").innerHTML += prop + "<br>";
      }
   }

   for (var i = 0; i < arrDom.length;i++){
      document.getElementById("demo").innerHTML += data + "." + arrDom[i]
   }
}

var domAttributes = {
"activeElement":"Returns the currently focused element in the document",
"addEventListener()":"Attaches an event handler to the document",
"adoptNode()":"Adopts a node from another document",
"anchors":"Returns a collection of all <a> elements in the document that have a name attribute",
"applets":"Returns a collection of all <applet> elements in the document",
"baseURI":"Returns the absolute base URI of a document",
"body":"Sets or returns the document's body (the <body> element)",
"close()":"Closes the output stream previously opened with document.open()",
"cookie":"Returns all name/value pairs of cookies in the document",
"charset":"Deprecated. Use characterSet instead. Returns the character encoding for the document",
"characterSet":"Returns the character encoding for the document",
"createAttribute()":"Creates an attribute node",
"createComment()":"Creates a Comment node with the specified text",
"createDocumentFragment()":"Creates an empty DocumentFragment node",
"createElement()":"Creates an Element node",
"createEvent()":"Creates a new event",
"createTextNode()":"Creates a Text node",
"defaultView":"Returns the window object associated with a document, or null if none is available.",
"designMode":"Controls whether the entire document should be editable or not.",
"doctype":"Returns the Document Type Declaration associated with the document",
"documentElement":"Returns the Document Element of the document (the <html> element)",
"documentMode":"Returns the mode used by the browser to render the document",
"documentURI":"Sets or returns the location of the document",
"domain":"Returns the domain name of the server that loaded the document",
"domConfig":"Obsolete. Returns the DOM configuration of the document",
"embeds":"Returns a collection of all <embed> elements the document",
"execCommand()":"Invokes the specified clipboard operation on the element currently having focus.",
"forms":"Returns a collection of all <form> elements in the document",
"fullscreenElement":"Returns the current element that is displayed in fullscreen mode",
"fullscreenEnabled()":"Returns a Boolean value indicating whether the document can be viewed in fullscreen mode",
"getElementById()":"Returns the element that has the ID attribute with the specified value",
"getElementsByClassName()":"Returns a HTMLCollection containing all elements with the specified class name",
"getElementsByName()":"Returns a HTMLCollection containing all elements with a specified name",
"getElementsByTagName()":"Returns a HTMLCollection containing all elements with the specified tag name",
"hasFocus()":"Returns a Boolean value indicating whether the document has focus",
"head":"Returns the <head> element of the document",
"images":"Returns a collection of all <img> elements in the document",
"implementation":"Returns the DOMImplementation object that handles this document",
"importNode()":"Imports a node from another document",
"inputEncoding":"Returns the encoding, character set, used for the document",
"lastModified":"Returns the date and time the document was last modified",
"links":"Returns a collection of all <a> and <area> elements in the document that have a href attribute",
"normalize()":"Removes empty Text nodes, and joins adjacent nodes",
"normalizeDocument()":"Removes empty Text nodes, and joins adjacent nodes",
"open()":"Opens an HTML output stream to collect output from document.write()",
"querySelector()":"Returns the first element that matches a specified CSS selector(s) in the document",
"querySelectorAll()":"Returns a static NodeList containing all elements that matches a specified CSS selector(s) in the document",
"readyState":"Returns the (loading) status of the document",
"referrer":"Returns the URL of the document that loaded the current document",
"removeEventListener()":"Removes an event handler from the document (that has been attached with the addEventListener() method)",
"renameNode()":"Renames the specified node",
"scripts":"Returns a collection of <script> elements in the document",
"strictErrorChecking":"Sets or returns whether error-checking is enforced or not",
"title":"Sets or returns the title of the document",
"URL":"Returns the full URL of the HTML document",
"write()":"Writes HTML expressions or JavaScript code to a document",
"writeln()":"Same as write() but adds a newline character after each statement"
}

//GET ARRAY OF DOM OBJECT PROPERTIES AND METHODS from https://www.w3schools.com/jsref/dom_obj_document.asp. Currently, listed above in JSON.
var strDomAttributes = JSON.stringify(domAttributes);
var objDomAttributes = JSON.parse(strDomAttributes);
var arrDom = [];
for (var i = 0;i < Object.keys(objDomAttributes).length;i++){
   arrDom.push(Object.keys(objDomAttributes)[i] + "<br>");
}
//document.getElementById("demo").innerHTML = arrDom

//GET CHARACTERS.JSON FILE CONTENT. STORED LOCALLY AT ./characters.json, but pulled from html
//var htmlCharacters = document.getElementById("data");
//var htmlCharacters = document.getElementByID("data").contentDocument.documentElement;




checkValidity | function checkValidity() { [native code] }
0 | undefined
1 | undefined
2 | undefined
3 | undefined
4 | undefined
5 | undefined
6 | undefined
7 | undefined
8 | undefined
9 | undefined
10 | undefined
11 | undefined
12 | undefined
reportValidity | function reportValidity() { [native code] }
0 | undefined
1 | undefined
2 | undefined
3 | undefined
4 | undefined
5 | undefined
6 | undefined
7 | undefined
8 | undefined
9 | undefined
10 | undefined
11 | undefined
12 | undefined
13 | undefined
setCustomValidity | function setCustomValidity() { [native code] }
0 | undefined
1 | undefined
2 | undefined
3 | undefined
4 | undefined
5 | undefined
6 | undefined
7 | undefined
8 | undefined
9 | undefined
10 | undefined
11 | undefined
12 | undefined
13 | undefined
14 | undefined
15 | undefined
16 | undefined
getSVGDocument | function getSVGDocument() { [native code] }
0 | undefined
1 | undefined
2 | undefined
3 | undefined
4 | undefined
5 | undefined
6 | undefined
7 | undefined
8 | undefined
9 | undefined
10 | undefined
11 | undefined
12 | undefined
13 | undefined
data | file:///C:/Users/cjohn/Desktop/Game%20Shortcuts/Javascript%20Local/CatFightJS/Characters.json
0 | undefined
1 | undefined
2 | undefined
3 | undefined
type | text/javascript
0 | undefined
1 | undefined
2 | undefined
3 | undefined
name |
0 | undefined
1 | undefined
2 | undefined
3 | undefined
useMap |





function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
async function demo() {
   var data = [];
   var object = document.getElementById("data");
   for (var i in object) {
      'document.getElementById("demo").innerHTML += i + " | " + object[i] + "<br>";'
      await sleep(1000);
      for (var x in i) {
         if(object[x] !== undefined){
            data += [i, object[i], x, object[x]];
            'document.getElementById("demo").innerHTML += x + " | " + object[x] + "<br>";'
         }
      }
      document.getElementById("demo").innerHTML += data + "<br>"
   }
}
demo();



//document.getElementById("demo").innerHTML += data + "<br>"






i = checkValidity, x = 0, object[i] = function checkValidity() { [native code] }, i[x] = c
i = checkValidity, x = 1, object[i] = function checkValidity() { [native code] }, i[x] = h
i = checkValidity, x = 2, object[i] = function checkValidity() { [native code] }, i[x] = e
i = checkValidity, x = 3, object[i] = function checkValidity() { [native code] }, i[x] = c
i = checkValidity, x = 4, object[i] = function checkValidity() { [native code] }, i[x] = k
i = checkValidity, x = 5, object[i] = function checkValidity() { [native code] }, i[x] = V
i = checkValidity, x = 6, object[i] = function checkValidity() { [native code] }, i[x] = a
i = checkValidity, x = 7, object[i] = function checkValidity() { [native code] }, i[x] = l
i = checkValidity, x = 8, object[i] = function checkValidity() { [native code] }, i[x] = i
i = checkValidity, x = 9, object[i] = function checkValidity() { [native code] }, i[x] = d
i = checkValidity, x = 10, object[i] = function checkValidity() { [native code] }, i[x] = i
i = checkValidity, x = 11, object[i] = function checkValidity() { [native code] }, i[x] = t
i = checkValidity, x = 12, object[i] = function checkValidity() { [native code] }, i[x] = y
i = reportValidity, x = 0, object[i] = function reportValidity() { [native code] }, i[x] = r
i = reportValidity, x = 1, object[i] = function reportValidity() { [native code] }, i[x] = e
i = reportValidity, x = 2, object[i] = function reportValidity() { [native code] }, i[x] = p
i = reportValidity, x = 3, object[i] = function reportValidity() { [native code] }, i[x] = o
i = reportValidity, x = 4, object[i] = function reportValidity() { [native code] }, i[x] = r
i = reportValidity, x = 5, object[i] = function reportValidity() { [native code] }, i[x] = t
i = reportValidity, x = 6, object[i] = function reportValidity() { [native code] }, i[x] = V
i = reportValidity, x = 7, object[i] = function reportValidity() { [native code] }, i[x] = a
i = reportValidity, x = 8, object[i] = function reportValidity() { [native code] }, i[x] = l
i = reportValidity, x = 9, object[i] = function reportValidity() { [native code] }, i[x] = i
i = reportValidity, x = 10, object[i] = function reportValidity() { [native code] }, i[x] = d
i = reportValidity, x = 11, object[i] = function reportValidity() { [native code] }, i[x] = i
i = reportValidity, x = 12, object[i] = function reportValidity() { [native code] }, i[x] = t
i = reportValidity, x = 13, object[i] = function reportValidity() { [native code] }, i[x] = y
i = setCustomValidity, x = 0, object[i] = function setCustomValidity() { [native code] }, i[x] = s
i = setCustomValidity, x = 1, object[i] = function setCustomValidity() { [native code] }, i[x] = e
i = setCustomValidity, x = 2, object[i] = function setCustomValidity() { [native code] }, i[x] = t
i = setCustomValidity, x = 3, object[i] = function setCustomValidity() { [native code] }, i[x] = C
i = setCustomValidity, x = 4, object[i] = function setCustomValidity() { [native code] }, i[x] = u
i = setCustomValidity, x = 5, object[i] = function setCustomValidity() { [native code] }, i[x] = s
i = setCustomValidity, x = 6, object[i] = function setCustomValidity() { [native code] }, i[x] = t
i = setCustomValidity, x = 7, object[i] = function setCustomValidity() { [native code] }, i[x] = o
i = setCustomValidity, x = 8, object[i] = function setCustomValidity() { [native code] }, i[x] = m
i = setCustomValidity, x = 9, object[i] = function setCustomValidity() { [native code] }, i[x] = V
i = setCustomValidity, x = 10, object[i] = function setCustomValidity() { [native code] }, i[x] = a
i = setCustomValidity, x = 11, object[i] = function setCustomValidity() { [native code] }, i[x] = l
i = setCustomValidity, x = 12, object[i] = function setCustomValidity() { [native code] }, i[x] = i
i = setCustomValidity, x = 13, object[i] = function setCustomValidity() { [native code] }, i[x] = d
i = setCustomValidity, x = 14, object[i] = function setCustomValidity() { [native code] }, i[x] = i
i = setCustomValidity, x = 15, object[i] = function setCustomValidity() { [native code] }, i[x] = t
i = setCustomValidity, x = 16, object[i] = function setCustomValidity() { [native code] }, i[x] = y




function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

function makeTableHTML(myArray) {
    var result = "<table border=1>";
    for(var i=0; i<myArray.length; i++) {
        result += "<tr>";
        for(var j=0; j<myArray[i].length; j++){
            result += "<td>"+myArray[i][j]+"</td>";
        }
        result += "</tr>";
    }
    result += "</table>";

    return result;
}

async function demo() {
   let data = [];
   var n = 0;
   for (var i in object) {
      await sleep(10);
      data += [["row",n],["name", i],["value", object[i]]];
      document.getElementById("demo").innerHTML = n
      n++
   }
   document.getElementById("demo").innerHTML = makeTableHTML(data);
}
var object = document.getElementById("data");
demo(object);

